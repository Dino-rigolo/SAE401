1747857151
8a0c4faa9771445189035ca844487507-phpdoc%3Ab30c4a2c8ee3c65d6ae00bef8459f2e8-ecfe05138c8a26b91bc34b058b4c5729
s:29444:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:15:"ApiProducts.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:1:{s:17:"\validateApiKey()";O:38:"phpDocumentor\Reflection\Php\Function_":9:{s:49:" phpDocumentor\Reflection\Php\Function_ arguments";a:0:{}s:48:" phpDocumentor\Reflection\Php\Function_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:43;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:51:" phpDocumentor\Reflection\Php\Function_ endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:52;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Function_ returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:45:" phpDocumentor\Reflection\Php\Function_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\validateApiKey()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"validateApiKey";}s:48:" phpDocumentor\Reflection\Php\Function_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:111:"API Key validation function
Checks for valid API key in request headers
GET requests are exempt from validation";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:7:" * type";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}}i:1;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Throws":3:{s:7:" * name";s:6:"throws";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:32:"If API key is invalid or missing";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:7:" * type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:10:"\Exception";s:36:" phpDocumentor\Reflection\Fqsen name";s:9:"Exception";}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:60:" phpDocumentor\Reflection\Php\Function_ hasReturnByReference";b:0;s:48:" phpDocumentor\Reflection\Php\Function_ metadata";a:0:{}s:50:" phpDocumentor\Reflection\Php\Function_ attributes";a:0:{}}}s:44:" phpDocumentor\Reflection\Php\File constants";a:1:{s:8:"\API_KEY";O:37:"phpDocumentor\Reflection\Php\Constant":9:{s:47:" phpDocumentor\Reflection\Php\Constant location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Constant endLocation";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:31;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:49:" phpDocumentor\Reflection\Php\Constant visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:44:" phpDocumentor\Reflection\Php\Constant fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:8:"\API_KEY";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"API_KEY";}s:47:" phpDocumentor\Reflection\Php\Constant docBlock";N;s:44:" phpDocumentor\Reflection\Php\Constant value";s:13:"'e8f1997c763'";s:44:" phpDocumentor\Reflection\Php\Constant final";b:0;s:47:" phpDocumentor\Reflection\Php\Constant metadata";a:0:{}s:49:" phpDocumentor\Reflection\Php\Constant attributes";a:0:{}}}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"ecfe05138c8a26b91bc34b058b4c5729";s:39:" phpDocumentor\Reflection\Php\File path";s:19:"api/ApiProducts.php";s:41:" phpDocumentor\Reflection\Php\File source";s:14903:"<?php
/**
 * Products API Controller
 * 
 * Handles CRUD operations for bicycle products:
 * - GET: Retrieve products with filtering options
 * - POST: Create new products
 * - PUT: Update existing products
 * - DELETE: Remove products
 * 
 * @package BikeStore\API
 * @author Your Name
 * @version 1.0
 */

/**
 * Set HTTP headers for CORS and JSON response
 */
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE");

require_once '../bootstrap.php'; // Ce fichier initialise déjà Doctrine

// Supprimez toutes les importations redondantes des entités
// Ne gardez que ces imports de classes
use Entity\Products;
use Entity\Brands;
use Entity\Categories;

define('API_KEY', 'e8f1997c763');

$request_method = $_SERVER["REQUEST_METHOD"];

/**
 * API Key validation function
 * Checks for valid API key in request headers
 * GET requests are exempt from validation
 * 
 * @return void
 * @throws Exception If API key is invalid or missing
 */
function validateApiKey() {
    if($_SERVER["REQUEST_METHOD"] == "GET") return;
    
    $headers = getallheaders();
    if (!isset($headers['Api']) || $headers['Api'] != API_KEY) {
        header('HTTP/1.0 401 Unauthorized');
        echo json_encode(['message' => 'Method Not Allowed']);
        exit();
    }   
}
validateApiKey();

$path_info = isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : '/';
$request = explode('/', trim($path_info, '/'));

/**
 * Request handling by HTTP method
 * 
 * GET endpoints:
 * - getall: List all products with optional filters
 *   Parameters:
 *   - brand: Filter by brand ID
 *   - category: Filter by category ID
 *   - model_year: Filter by year
 *   - min_price: Minimum price filter
 *   - max_price: Maximum price filter
 * 
 * - getfilters: Get all available filter options
 *   Returns:
 *   - brands: List of available brands
 *   - categories: List of available categories
 *   - model_years: List of available years
 * 
 * - getbyid: Get single product by ID
 *   Parameters:
 *   - id: Product ID to retrieve
 * 
 * POST endpoint:
 * - create: Create new product
 *   Required JSON body:
 *   - product_name: string
 *   - brand_id: int
 *   - category_id: int
 *   - model_year: int
 *   - list_price: float
 * 
 * PUT endpoint:
 * - update: Update existing product
 *   Parameters:
 *   - id: Product ID to update
 *   Same JSON body as create
 * 
 * DELETE endpoint:
 * - delete: Remove product
 *   Parameters:
 *   - id: Product ID to delete
 * 
 * @var string $request_method HTTP method of current request
 * @var array $request Parsed request path segments
 * @var \Doctrine\ORM\EntityManager $entityManager Database connection
 * @throws Exception For invalid actions or data
 */
switch ($request_method) {
    case 'GET':
        try {
            // Gestion de l'action getall simplifiée
            if (!empty($_REQUEST["action"]) && $_REQUEST["action"] == "getall") {
                global $entityManager;
                
                // Simplification de la requête avec un seul QueryBuilder
                $qb = $entityManager->createQueryBuilder();
                $qb->select('p')
                ->from('Entity\Products', 'p')  // Changez 'src\Entity\Products' en 'Entity\Products'
                ->leftJoin('p.brand', 'b')
                ->leftJoin('p.category', 'c');
                
                // Ajout des filtres seulement s'ils sont définis
                if (!empty($_REQUEST["brand"])) {
                    $qb->andWhere('b.brand_id = :brand')
                       ->setParameter('brand', $_REQUEST["brand"]);
                }
                
                if (!empty($_REQUEST["category"])) {
                    $qb->andWhere('c.category_id = :category')
                       ->setParameter('category', $_REQUEST["category"]);
                }
                
                if (!empty($_REQUEST["model_year"])) {
                    $qb->andWhere('p.model_year = :model_year')
                       ->setParameter('model_year', $_REQUEST["model_year"]);
                }
                
                if (!empty($_REQUEST["min_price"])) {
                    $qb->andWhere('p.list_price >= :min_price')
                       ->setParameter('min_price', $_REQUEST["min_price"]);
                }
                
                if (!empty($_REQUEST["max_price"])) {
                    $qb->andWhere('p.list_price <= :max_price')
                       ->setParameter('max_price', $_REQUEST["max_price"]);
                }
                
                // Exécution de la requête
                error_log("Paramètres reçus dans getall: " . json_encode($_REQUEST));
                $query = $qb->getQuery();
                $sql = $query->getSQL();
                $params = $query->getParameters();
                error_log("SQL: " . $sql);
                error_log("Paramètres: " . json_encode($params->map(function($p) { return $p->getValue(); })->toArray()));
                                
                $products = $qb->getQuery()->getResult();
                
                // Transformation simplifiée des objets en tableau JSON
                $productData = array_map(function($product) {
                    return [
                        'product_id' => $product->getProductId(),
                        'product_name' => $product->getProductName(),
                        'brand_id' => $product->getBrand()->getBrandId(),
                        'brand_name' => $product->getBrand()->getBrandName(),
                        'category_id' => $product->getCategory()->getCategoryId(),
                        'category_name' => $product->getCategory()->getCategoryName(),
                        'model_year' => $product->getModelYear(),
                        'list_price' => $product->getListPrice()
                    ];
                }, $products);
                
                echo json_encode($productData);
                exit();
            } 
            // Gestion de getfilters simplifiée
            elseif ($_REQUEST["action"] == "getfilters") {
                header('Content-Type: application/json');
                try {
                    // Utilisez directement SQL pour éviter les problèmes de doublon de classe
                    $conn = $entityManager->getConnection();
                    
                    // Récupérer les marques sans doublons - sélectionne la première occurrence de chaque nom
                    $brandsSql = "SELECT MIN(brand_id) as id, brand_name as name 
                                 FROM brands 
                                 GROUP BY brand_name 
                                 ORDER BY name";
                    $brands = $conn->executeQuery($brandsSql)->fetchAllAssociative();
                    
                    // Récupérer les catégories sans doublons
                    $categoriesSql = "SELECT MIN(category_id) as id, category_name as name 
                                     FROM categories 
                                     GROUP BY category_name 
                                     ORDER BY name";
                    $categories = $conn->executeQuery($categoriesSql)->fetchAllAssociative();
                    
                    // Récupérer les années modèles
                    $yearsSql = "SELECT DISTINCT model_year FROM products ORDER BY model_year DESC";
                    $yearsResult = $conn->executeQuery($yearsSql)->fetchAllAssociative();
                    $years = array_column($yearsResult, 'model_year');
                    
                    echo json_encode([
                        'brands' => $brands,
                        'categories' => $categories,
                        'model_years' => $years
                    ]);
                } catch (Exception $e) {
                    echo json_encode(['error' => $e->getMessage()]);
                }
                exit();
            }
            elseif (!empty($_REQUEST["action"]) && $_REQUEST["action"] == "getbyid" && !empty($_REQUEST["id"])) {
                $product = $entityManager->find(Products::class, $_REQUEST["id"]);
                if ($product) {
                    echo json_encode([
                        'product_id' => $product->getProductId(),
                        'product_name' => $product->getProductName(),
                        'brand_id' => $product->getBrand() ? $product->getBrand()->getBrandId() : null,
                        'brand_name' => $product->getBrand() ? $product->getBrand()->getBrandName() : 'N/A', // Ajouté 
                        'category_id' => $product->getCategory() ? $product->getCategory()->getCategoryId() : null,
                        'category_name' => $product->getCategory() ? $product->getCategory()->getCategoryName() : 'N/A', // Ajouté
                        'model_year' => $product->getModelYear(),
                        'list_price' => $product->getListPrice()
                    ]);
                } else {
                    throw new Exception('Product not found');
                }
            } else {
                throw new Exception('Invalid action.');
            }
        } catch (Exception $e) {
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
    case 'POST':
        try {
            if (!empty($_REQUEST["action"]) && $_REQUEST["action"] == "create") {
                $data = json_decode(file_get_contents('php://input'), true);
                if (isset($data['product_name'], $data['brand_id'], $data['category_id'], $data['model_year'], $data['list_price'])) {
                    $product = new Products();
                    $product->setProductName($data['product_name']);
                    $brand = $entityManager->find(Brands::class, $data['brand_id']);
                    if ($brand) {
                        $product->setBrand($brand);
                    } else {
                        throw new Exception('Brand not found.');
                    }
                    $category = $entityManager->find(Categories::class, $data['category_id']);
                    if ($category) {
                        $product->setCategory($category);
                    } else {
                        throw new Exception('category not found.');
                    }
                    $product->setModelYear($data['model_year']);
                    $product->setListPrice($data['list_price']);
                    $entityManager->persist($product);
                    $entityManager->flush();
                    echo json_encode(['message' => 'Product created']);
                } else {
                    throw new Exception('Invalid input');
                }
            } else {
                throw new Exception('Invalid action.');
            }
        } catch (Exception $e) {
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
    case 'PUT':
        try {
            if (!empty($_REQUEST["action"]) && $_REQUEST["action"] == "update" && !empty($_REQUEST["id"])) {
                $data = json_decode(file_get_contents('php://input'), true);
                if (isset($data['product_name'], $data['brand_id'], $data['category_id'], $data['model_year'], $data['list_price'])) {
                    $product = $entityManager->find(Products::class, $_REQUEST["id"]);
                    if ($product) {
                        $product->setProductName($data['product_name']);
                        $brand = $entityManager->find(Brands::class, $data['brand_id']);
                        if ($brand) {
                            $product->setBrand($brand);
                        } else {
                            throw new Exception('Brand not found.');
                        }
                        $category = $entityManager->find(Categories::class, $data['category_id']);
                        if ($category) {
                            $product->setCategory($category);
                        } else {
                            throw new Exception('category not found.');
                        }
                        $product->setModelYear($data['model_year']);
                        $product->setListPrice($data['list_price']);
                        $entityManager->flush();
                        echo json_encode(['message' => 'Product updated']);
                    } else {
                        throw new Exception('Product not found.');
                    }
                } else {
                    throw new Exception('Invalid input');
                }
            } else {
                throw new Exception('Invalid action.');
            }
        } catch (Exception $e) {
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
    case 'DELETE':
        try {
            if (!empty($_REQUEST["action"]) && $_REQUEST["action"] == "delete" && !empty($_REQUEST["id"])) {
                $product = $entityManager->find(Products::class, $_REQUEST["id"]);
                if ($product) {
                    $entityManager->remove($product);
                    $entityManager->flush();
                    echo json_encode(['message' => 'Product deleted']);
                } else {
                    throw new Exception('Product not found pour delete.');
                }
            } else {
                throw new Exception('Invalid action pour delete.');
            }
        } catch (Exception $e) {
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
    default:
        http_response_code(405);
        echo json_encode(['message' => 'Method Not Allowed']);
        break;
}

/**
 * Usage Examples:
 * 
 * GET all products:
 * GET /SAE401/api/ApiProducts.php?action=getall
 * 
 * GET single product:
 * GET /SAE401/api/ApiProducts.php?action=getbyid&id=1
 * 
 * CREATE product:
 * POST /SAE401/api/ApiProducts.php?action=create
 * Headers: Content-Type: application/json
 * Body: {"product_name": "New Product", "brand_id": 1, "category_id": 1, "model_year": 2025, "list_price": 100.00}
 * 
 * UPDATE product:
 * PUT /SAE401/api/ApiProducts.php?action=update&id=1
 * Headers: Content-Type: application/json
 * Body: {"product_name": "Updated Product", "brand_id": 1, "category_id": 1, "model_year": 2025, "list_price": 150.00}
 * 
 * DELETE product:
 * DELETE /SAE401/api/ApiProducts.php?action=delete&id=1
 */
?>";s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:23:"Products API Controller";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:179:"Handles CRUD operations for bicycle products:
- GET: Retrieve products with filtering options
- POST: Create new products
- PUT: Update existing products
- DELETE: Remove products";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:3:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:13:"BikeStore\API";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:14:" * description";N;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:9:"Your Name";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:0:"";}i:2;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Version":3:{s:7:" * name";s:7:"version";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:55:" phpDocumentor\Reflection\DocBlock\Tags\Version version";s:3:"1.0";}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";